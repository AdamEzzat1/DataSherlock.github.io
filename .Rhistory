reticulate::repl_python()
reticulate::repl_python()
# This is a Python code chunk
import pandas as pd
# This is a Python code chunk
import pandas as pd
# This is a Python code chunk
import pandas as pd
# Create a sample DataFrame
data = {
'Name': ['Alice', 'Bob', 'Charlie'],
'Age': [25, 30, 28],
'City': ['New York', 'Los Angeles', 'Chicago']
}
df = pd.DataFrame(data) Â 
# Print the DataFrame
print(df)
quit
1 + 1
# Create a sample data frame
data <- data.frame(
Name = c("Alice", "Bob", "Charlie"),
Age = c(25, 30, 28),
City = c("New York", "Los Angeles", "Chicago")
)
# Print the data frame
print(data)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
library(ggplot2)
ggplot(data, aes(x = Name, y = Age)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Age Distribution", x = "Name", y = "Age")
library(ggplot2)
# Load the mpg dataset
data(mpg)
head(mpg)
summary(mpg)
library(ggplot2)
# Load the mpg dataset
data(mpg)
head(mpg)
summary(mpg)
# Calculate Z-scores
z_scores <- (mpg$cty - mean(mpg$cty)) / sd(mpg$cty)
# Identify outliers based on Z-scores (e.g., |Z-score| > 3)
outliers <- mpg[abs(z_scores) > 3, ]
# Calculate Z-scores
z_scores <- (mpg$cty - mean(mpg$cty)) / sd(mpg$cty)
# Identify outliers based on Z-scores (e.g., |Z-score| > 3)
outliers <- mpg[abs(z_scores) > 3, ]
mpg$fuel_efficiency_per_cylinder <- mpg$cty / mpg$cyl
ggplot(mpg, aes(x = cty, y = hwy)) +
geom_point() +
labs(title = "City vs. Highway Fuel Economy",
x = "City Fuel Economy (mpg)",
y = "Highway Fuel Economy (mpg)")
ggplot(mpg, aes(x = cty, y = hwy)) +
geom_point() +
labs(title = "City vs. Highway Fuel Economy",
x = "City Fuel Economy (mpg)",
y = "Highway Fuel Economy (mpg)")
# Calculate Z-scores
z_scores <- (mpg$cty - mean(mpg$cty)) / sd(mpg$cty)
# Identify outliers based on Z-scores (e.g., |Z-score| > 3)
outliers <- mpg[abs(z_scores) > 3, ]
# Print the outliers
print(outliers)
library(randomForest)
install.packages(randomforest)
"randomForest"
install.packages("randomForest")
library(randomForest)
# Create an isolation forest model
model <- isolationForest(mpg[, c("cty", "hwy")])
install.packages(isotree)
install.packages("isotree")
library(isotree)  # For isolation forest
library(ggplot2)  # For plotting
library(dplyr)    # For data manipulation
install.packages("dpylr")
install.packages("dplyr")
library(isotree)  # For isolation forest
library(ggplot2)  # For plotting
library(dplyr)    # For data manipulation
library(ggplot2)
ggplot(data, aes(x = Name, y = Age)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Age Distribution", x = "Name", y = "Age")
library(ggplot2)
# Load the mpg dataset
data(mpg)
head(mpg)
summary(mpg)
# Calculate Z-scores
z_scores <- (mpg$cty - mean(mpg$cty)) / sd(mpg$cty)
# Identify outliers based on Z-scores (e.g., |Z-score| > 3)
outliers <- mpg[abs(z_scores) > 3, ]
# Calculate Z-scores
z_scores <- (mpg$cty - mean(mpg$cty)) / sd(mpg$cty)
# Identify outliers based on Z-scores (e.g., |Z-score| > 3)
outliers <- mpg[abs(z_scores) > 3, ]
# Print the outliers
print(outliers)
mpg$fuel_efficiency_per_cylinder <- mpg$cty / mpg$cyl
library(isotree)  # For isolation forest
library(ggplot2)  # For plotting
library(dplyr)    # For data manipulation
# Load the mpg dataset (comes with ggplot2)
data(mpg)
# Create an isolation forest model
model <- isolation.forest(mpg[, c("cty", "hwy")], ntrees = 100)
# Predict outlier scores
scores <- predict(model, mpg[, c("cty", "hwy")])
# Identify outliers based on a threshold (e.g., scores > 0.5)
outliers <- mpg[scores > 0.5, ]
# Visualize the results
ggplot(mpg, aes(x = cty, y = hwy)) +
geom_point(aes(color = scores > 0.5)) +
scale_color_manual(values = c("blue", "red")) +
labs(title = "Outlier Detection in MPG Data",
x = "City MPG", y = "Highway MPG",
color = "Is Outlier")
# Install the package if you haven't already
# install.packages("isotree")
library(isotree)
library(ggplot2)  # For visualization
# Assuming you're using the mpg dataset from ggplot2
data(mpg)
# Create an isolation forest model
model <- isolation.forest(mpg[, c("cty", "hwy")], ntrees = 100)
# Predict anomaly scores
scores <- predict(model, mpg[, c("cty", "hwy")])
# Identify outliers based on a threshold (e.g., scores > 0.5)
outliers <- mpg[scores > 0.5, ]
# Visualize the results
ggplot(mpg, aes(x = cty, y = hwy)) +
geom_point(aes(color = scores > 0.5)) +
scale_color_manual(values = c("blue", "red")) +
labs(title = "Outlier Detection in MPG Data",
x = "City MPG", y = "Highway MPG",
color = "Is Outlier")
library(e1071)
install.packages('e1071')
library("e1071")
library(e1071)
# Load the mpg dataset
in
library(e1071)
# Load the mpg dataset
# Create a one-class SVM model
model <- svm(x = mpg[, c("cty", "hwy")], y = NULL, type = "one-classification", nu = 0.1, kernel = "radial")
# Predict outlier scores
scores <- predict(model, mpg[, c("cty", "hwy")])
# Identify outliers (scores < 0 are considered outliers)
outliers <- mpg[scores < 0, ]
# Visualize the results
ggplot(mpg, aes(x = cty, y = hwy)) +
geom_point(aes(color = scores < 0)) +
scale_color_manual(values = c("blue", "red")) +
labs(title = "One-Class SVM Outlier Detection in MPG Data",
x = "City MPG", y = "Highway MPG",
color = "Is Outlier")
install.packages("fpc")
# Install required packages if not already installed
# install.packages(c("fpc", "ggplot2"))
library(fpc)
# Perform DBSCAN clustering
result <- dbscan(mpg[, c("cty", "hwy")], eps = 2, MinPts = 5)
# Identify outliers (points with cluster label 0)
outliers <- mpg[result$cluster == 0, ]
# Add cluster information to the original dataset
mpg$cluster <- factor(result$cluster,
levels = c(0, 1:(max(result$cluster))),
labels = c("Outlier", paste("Cluster", 1:(max(result$cluster)))))
# Visualize the results
ggplot(mpg, aes(x = cty, y = hwy, color = cluster)) +
geom_point(size = 3) +
scale_color_manual(values = c("red", rainbow(max(result$cluster)))) +
labs(title = "DBSCAN Clustering and Outlier Detection in MPG Data",
x = "City MPG", y = "Highway MPG",
color = "Cluster") +
theme_minimal()
# Print summary of results
cat("Number of clusters:", max(result$cluster), "\n")
cat("Number of outliers:", sum(result$cluster == 0), "\n")
`renv::status()`
renv::status()
renv::snapshot()
renv::restore()
